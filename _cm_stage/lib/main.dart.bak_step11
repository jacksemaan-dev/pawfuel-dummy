import 'package:flutter/material.dart';
import 'package:webview_flutter/webview_flutter.dart';

void main() {
  WidgetsFlutterBinding.ensureInitialized();
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});
  @override
  Widget build(BuildContext context) {
    return const MaterialApp(
      debugShowCheckedModeBanner: false,
      home: WebDiag(),
    );
  }
}

class WebDiag extends StatefulWidget {
  const WebDiag({super.key});
  @override
  State<WebDiag> createState() => _WebDiagState();
}

class _WebDiagState extends State<WebDiag> {
  late final WebViewController _c;
  final ValueNotifier<List<String>> _logs = ValueNotifier<List<String>>(<String>[]);
  bool _panel = true;

  void _push(String line) {
    final now = DateTime.now().toIso8601String();
    final msg = "[] ";
    final lst = List<String>.from(_logs.value)..add(msg);
    _logs.value = lst.takeLast(200); // keep last 200 lines
  }

  @override
  void initState() {
    super.initState();

    _c = WebViewController()
      ..setJavaScriptMode(JavaScriptMode.unrestricted)
      ..setBackgroundColor(const Color(0xFFFFFFFF))
      ..setNavigationDelegate(NavigationDelegate(
        onPageFinished: (url) async {
          // Inject hooks to surface missing files / CSP / JS errors
          const js = r"""
(function(){
  try {
    var isFile = !/^https?:/i.test(location.origin);
    // Relay console errors
    var oldError = console.error;
    console.error = function(){ try {
      window.LOG.postMessage('[console.error] ' + Array.prototype.join.call(arguments, ' '));
    } catch(e){}; try { oldError && oldError.apply(console, arguments); } catch(e2){} };
    // Window error
    window.addEventListener('error', function(e){
      try { window.LOG.postMessage('[window.error] ' + e.message + ' @' + e.filename + ':' + e.lineno); } catch(_){}
    });

    // Hook resource loading via fetch / XHR
    var ofetch = window.fetch;
    window.fetch = function(u, opts){
      try { window.LOG.postMessage('[fetch] ' + u); } catch(_){}
      return ofetch.apply(this, arguments).catch(function(err){
        try { window.LOG.postMessage('[fetch.fail] ' + u + ' :: ' + err); } catch(_){}
        throw err;
      });
    };
    var oopen = XMLHttpRequest.prototype.open;
    XMLHttpRequest.prototype.open = function(method, url){
      try { window.LOG.postMessage('[xhr] ' + method + ' ' + url); } catch(_){}
      return oopen.apply(this, arguments);
    };

    // Block SW registration in file://
    if (isFile && 'serviceWorker' in navigator) {
      try { navigator.serviceWorker.register = function(){ window.LOG.postMessage('[sw.stub] blocked'); return Promise.resolve({}); }; } catch(_){}
    }

    // Emit base info
    try {
      window.LOG.postMessage('[info] baseURI=' + document.baseURI);
    } catch(_){}
  } catch(e) {
    try { window.LOG.postMessage('[inject.error] ' + e.message); } catch(_){}
  }
})();
""";
          await _c.runJavaScript(js);
        },
        onWebResourceError: (err) {
          _push("[webres.error]   :: ");
        },
      ))
      ..addJavaScriptChannel('LOG', onMessageReceived: (JavaScriptMessage m) {
        _push(m.message);
      })
      ..loadFlutterAsset('assets/www/index.html');
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Stack(
        children: [
          WebViewWidget(controller: _c),
          if (_panel)
            Positioned(
              left: 0, right: 0, bottom: 0,
              child: Container(
                height: 220,
                decoration: BoxDecoration(color: const Color(0xCC000000)),
                child: Column(
                  children: [
                    Container(
                      height: 36,
                      color: const Color(0xFF222222),
                      child: Row(
                        children: [
                          const SizedBox(width: 12),
                          const Text('Diagnostics', style: TextStyle(color: Colors.white)),
                          const Spacer(),
                          TextButton(onPressed: () => setState(() => _panel = false), child: const Text('HIDE', style: TextStyle(color: Colors.white))),
                        ],
                      ),
                    ),
                    Expanded(
                      child: ValueListenableBuilder<List<String>>(
                        valueListenable: _logs,
                        builder: (context, logs, _) {
                          return SingleChildScrollView(
                            reverse: true,
                            padding: const EdgeInsets.all(8),
                            child: Text(
                              logs.join("\n"),
                              style: const TextStyle(color: Colors.white, fontSize: 12),
                            ),
                          );
                        },
                      ),
                    ),
                  ],
                ),
              ),
            ),
        ],
      ),
      floatingActionButton: FloatingActionButton.small(
        onPressed: () => setState(() => _panel = !_panel),
        child: Icon(_panel ? Icons.visibility_off : Icons.visibility),
      ),
    );
  }
}

extension<T> on List<T> {
  List<T> takeLast(int n) => length <= n ? List<T>.from(this) : sublist(length - n);
}